---
- name: Populate service facts
  ansible.builtin.service_facts:

- name: Create keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Docker GPG key
  get_url:
    url: https://download.docker.com/linux/debian/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'

- name: Add docker repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian bookworm stable"
    state: present

- name: Update apt cashe and install docker-ce
  apt:
    name: docker-ce
    state: latest
    update_cache: true

- name: Install Kubernetes module for python
  pip:
    name: kubernetes
    break_system_packages: true

- name: Install kubectl
  get_url:
    url: https://dl.k8s.io/release/v1.33.0/bin/linux/amd64/kubectl
    dest: /usr/local/bin/kubectl
    mode: '0755'

- name: Download Helm install script
  get_url:
    url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    dest: /tmp/get_helm.sh
    mode: '0700'

- name: Install Helm
  command:
    cmd: /tmp/get_helm.sh
    creates: /usr/local/bin/helm

- name: Cleanup Helm installation script
  file:
    path: /tmp/get_helm.sh
 

- name: Make Sure Docker Service is Running
  service:
    name: docker
    state: started
    enabled: true

- name: Download k3d Installer
  get_url:
    url: https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh
    dest: /home/
    mode: '0755'

- name: Install K3d
  command:
    cmd: bash /home/install.sh 
    creates: /usr/local/bin/k3d

- name: Create k3d Cluster
  command:
    cmd: k3d cluster create mycluster --api-port "104.248.119.73:9192" -p "443:443@loadbalancer" -p "8888:30030@loadbalancer" -p "8181:30130@loadbalancer"
    creates: /root/.kube/config

- name: Wait For Cluster Creation
  kubernetes.core.k8s_info:
    kind: Node
    wait: yes
    wait_condition:
      type: Ready
      status: "True"

# - name: Add cert-manager Helm repository
#   kubernetes.core.helm_repository:
#     name: jetstack
#     repo_url: https://charts.jetstack.io
#     state: present
#
# - name: Create cert-manager namespace
#   kubernetes.core.k8s:
#     kind: Namespace
#     name: cert-manager
#     state: present
#
# - name: Install cert-manager CRDs
#   kubernetes.core.k8s:
#     src: https://github.com/cert-manager/cert-manager/releases/download/v1.13.2/cert-manager.crds.yaml
#     state: present
#
# - name: Install cert-manager
#   kubernetes.core.k8s:
#     src: https://github.com/cert-manager/cert-manager/releases/download/v1.13.2/cert-manager.yaml
#     state: present
#
# - name: Wait for cert-manager deployment to be ready
#   kubernetes.core.k8s_info:
#     kind: Deployment
#     name: cert-manager
#     namespace: cert-manager
#     wait: yes
#     wait_condition:
#       type: Available
#       status: "True"
#
# - name: Add GitLab Helm repository
#   kubernetes.core.helm_repository:
#     name: gitlab
#     repo_url: https://charts.gitlab.io/
#     state: present
#
# - name: Create gitlab-system namespace
#   kubernetes.core.k8s:
#     kind: Namespace
#     name: gitlab
#     state: present
#
# - name: Install GitLab operator
#   kubernetes.core.helm:
#     name: gitlab-operator
#     chart_ref: gitlab/gitlab-operator
#     release_namespace: gitlab
#     wait: true

- name: Add GitLab Helm repository
  kubernetes.core.helm_repository:
    name: gitlab
    repo_url: https://charts.gitlab.io/
    state: present

- name: Create gitlab namespace
  kubernetes.core.k8s:
    kind: Namespace
    name: gitlab
    state: present

- name: Create GitLab values file
  copy:
    dest: /tmp/gitlab-values.yaml
    content: |
      global:
        edition: ce
        registry:
          enabled: false
        ingress:
          configureCertmanager: false
        hosts:
          https: false
        rails:
          bootsnap:
            enabled: false
      certmanager:
        install: false
      nginx-ingress:
        enabled: false
      prometheus:
        install: false
      gitlab-runner:
        install: false
      gitlab:
        webservice:
          minReplicas: 1
          maxReplicas: 1
        sidekiq:
          minReplicas: 1
          maxReplicas: 1
        gitlab-shell:
          minReplicas: 1
          maxReplicas: 1
          service:
            type: NodePort
            nodePort: 32022
        kas:
          minReplicas: 1
          maxReplicas: 1

- name: Install GitLab using Helm
  kubernetes.core.helm:
    name: gitlab
    chart_ref: gitlab/gitlab
    release_namespace: gitlab
    values_files:
      - /tmp/gitlab-values.yaml
    wait: true
    timeout: 600s
